/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminTokenRecovery = ContractEventLog<{
  token: string;
  amount: string;
  0: string;
  1: string;
}>;
export type LotteryClose = ContractEventLog<{
  lotteryId: string;
  firstTicketIdNextLottery: string;
  0: string;
  1: string;
}>;
export type LotteryInjection = ContractEventLog<{
  lotteryId: string;
  injectedAmount: string;
  0: string;
  1: string;
}>;
export type LotteryNumberDrawn = ContractEventLog<{
  lotteryId: string;
  finalNumber: string;
  countWinningTickets: string;
  0: string;
  1: string;
  2: string;
}>;
export type LotteryOpen = ContractEventLog<{
  lotteryId: string;
  startTime: string;
  endTime: string;
  priceTicketInHera: string;
  firstTicketId: string;
  heraInjectedAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type LotteryPoolIncreased = ContractEventLog<{
  lotteryId: string;
  amount: string;
  0: string;
  1: string;
}>;
export type NewOperatorAndTreasuryAndInjectorAddresses = ContractEventLog<{
  operator: string;
  treasury: string;
  injector: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewRandomGenerator = ContractEventLog<{
  randomGenerator: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TicketsClaim = ContractEventLog<{
  claimer: string;
  heraAmount: string;
  lotteryId: string;
  numberTickets: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TicketsPurchase = ContractEventLog<{
  buyer: string;
  lotteryId: string;
  numberTickets: string;
  0: string;
  1: string;
  2: string;
}>;

export interface LotteryHeraABIAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LotteryHeraABIAbi;
  clone(): LotteryHeraABIAbi;
  methods: {
    MAX_LENGTH_LOTTERY(): NonPayableTransactionObject<string>;

    MAX_TREASURY_FEE(): NonPayableTransactionObject<string>;

    MIN_LENGTH_LOTTERY(): NonPayableTransactionObject<string>;

    buyTickets(
      _lotteryId: number | string | BN,
      _ticketNumbers: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    calculateTotalPrice(
      _priceTicket: number | string | BN,
      _numberTickets: number | string | BN
    ): NonPayableTransactionObject<string>;

    changeRandomGenerator(
      _randomGeneratorAddress: string
    ): NonPayableTransactionObject<void>;

    claimTickets(
      _lotteryId: number | string | BN,
      _ticketIds: (number | string | BN)[],
      _brackets: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    closeLottery(
      _lotteryId: number | string | BN
    ): NonPayableTransactionObject<void>;

    currentLotteryId(): NonPayableTransactionObject<string>;

    currentTicketId(): NonPayableTransactionObject<string>;

    drawFinalNumberAndMakeLotteryClaimable(
      _lotteryId: number | string | BN
    ): NonPayableTransactionObject<void>;

    heraPendingInjectionNextLottery(): NonPayableTransactionObject<string>;

    heraToken(): NonPayableTransactionObject<string>;

    injectFunds(
      _lotteryId: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    injectorAddress(): NonPayableTransactionObject<string>;

    maxNumberTicketsPerBuyOrClaim(): NonPayableTransactionObject<string>;

    maxPriceTicketInHera(): NonPayableTransactionObject<string>;

    minPriceTicketInHera(): NonPayableTransactionObject<string>;

    operatorAddress(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    randomGenerator(): NonPayableTransactionObject<string>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setMaxNumberTicketsPerBuy(
      _maxNumberTicketsPerBuy: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinAndMaxTicketPriceInHera(
      _minPriceTicketInHera: number | string | BN,
      _maxPriceTicketInHera: number | string | BN
    ): NonPayableTransactionObject<void>;

    setOperatorAndTreasuryAndInjectorAddresses(
      _operatorAddress: string,
      _treasuryAddress: string,
      _injectorAddress: string
    ): NonPayableTransactionObject<void>;

    startLottery(
      _endTime: number | string | BN,
      _priceTicketInHera: number | string | BN,
      _heraRewardsBreakdown: (number | string | BN)[],
      _treasuryFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    treasuryAddress(): NonPayableTransactionObject<string>;

    viewCurrentLotteryId(): NonPayableTransactionObject<string>;

    viewLottery(
      _lotteryId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string[],
        string,
        string[],
        string[],
        string,
        string,
        string,
        string
      ]
    >;

    viewNumbersAndStatusesForTicketIds(
      _ticketIds: (number | string | BN)[]
    ): NonPayableTransactionObject<{
      0: string[];
      1: boolean[];
    }>;

    viewRewardsForTicketId(
      _lotteryId: number | string | BN,
      _ticketId: number | string | BN,
      _bracket: number | string | BN
    ): NonPayableTransactionObject<string>;

    viewUserInfoForLotteryId(
      _user: string,
      _lotteryId: number | string | BN,
      _cursor: number | string | BN,
      _size: number | string | BN
    ): NonPayableTransactionObject<{
      0: string[];
      1: string[];
      2: boolean[];
      3: string;
    }>;
  };
  events: {
    AdminTokenRecovery(cb?: Callback<AdminTokenRecovery>): EventEmitter;
    AdminTokenRecovery(
      options?: EventOptions,
      cb?: Callback<AdminTokenRecovery>
    ): EventEmitter;

    LotteryClose(cb?: Callback<LotteryClose>): EventEmitter;
    LotteryClose(
      options?: EventOptions,
      cb?: Callback<LotteryClose>
    ): EventEmitter;

    LotteryInjection(cb?: Callback<LotteryInjection>): EventEmitter;
    LotteryInjection(
      options?: EventOptions,
      cb?: Callback<LotteryInjection>
    ): EventEmitter;

    LotteryNumberDrawn(cb?: Callback<LotteryNumberDrawn>): EventEmitter;
    LotteryNumberDrawn(
      options?: EventOptions,
      cb?: Callback<LotteryNumberDrawn>
    ): EventEmitter;

    LotteryOpen(cb?: Callback<LotteryOpen>): EventEmitter;
    LotteryOpen(
      options?: EventOptions,
      cb?: Callback<LotteryOpen>
    ): EventEmitter;

    LotteryPoolIncreased(cb?: Callback<LotteryPoolIncreased>): EventEmitter;
    LotteryPoolIncreased(
      options?: EventOptions,
      cb?: Callback<LotteryPoolIncreased>
    ): EventEmitter;

    NewOperatorAndTreasuryAndInjectorAddresses(
      cb?: Callback<NewOperatorAndTreasuryAndInjectorAddresses>
    ): EventEmitter;
    NewOperatorAndTreasuryAndInjectorAddresses(
      options?: EventOptions,
      cb?: Callback<NewOperatorAndTreasuryAndInjectorAddresses>
    ): EventEmitter;

    NewRandomGenerator(cb?: Callback<NewRandomGenerator>): EventEmitter;
    NewRandomGenerator(
      options?: EventOptions,
      cb?: Callback<NewRandomGenerator>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TicketsClaim(cb?: Callback<TicketsClaim>): EventEmitter;
    TicketsClaim(
      options?: EventOptions,
      cb?: Callback<TicketsClaim>
    ): EventEmitter;

    TicketsPurchase(cb?: Callback<TicketsPurchase>): EventEmitter;
    TicketsPurchase(
      options?: EventOptions,
      cb?: Callback<TicketsPurchase>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminTokenRecovery", cb: Callback<AdminTokenRecovery>): void;
  once(
    event: "AdminTokenRecovery",
    options: EventOptions,
    cb: Callback<AdminTokenRecovery>
  ): void;

  once(event: "LotteryClose", cb: Callback<LotteryClose>): void;
  once(
    event: "LotteryClose",
    options: EventOptions,
    cb: Callback<LotteryClose>
  ): void;

  once(event: "LotteryInjection", cb: Callback<LotteryInjection>): void;
  once(
    event: "LotteryInjection",
    options: EventOptions,
    cb: Callback<LotteryInjection>
  ): void;

  once(event: "LotteryNumberDrawn", cb: Callback<LotteryNumberDrawn>): void;
  once(
    event: "LotteryNumberDrawn",
    options: EventOptions,
    cb: Callback<LotteryNumberDrawn>
  ): void;

  once(event: "LotteryOpen", cb: Callback<LotteryOpen>): void;
  once(
    event: "LotteryOpen",
    options: EventOptions,
    cb: Callback<LotteryOpen>
  ): void;

  once(event: "LotteryPoolIncreased", cb: Callback<LotteryPoolIncreased>): void;
  once(
    event: "LotteryPoolIncreased",
    options: EventOptions,
    cb: Callback<LotteryPoolIncreased>
  ): void;

  once(
    event: "NewOperatorAndTreasuryAndInjectorAddresses",
    cb: Callback<NewOperatorAndTreasuryAndInjectorAddresses>
  ): void;
  once(
    event: "NewOperatorAndTreasuryAndInjectorAddresses",
    options: EventOptions,
    cb: Callback<NewOperatorAndTreasuryAndInjectorAddresses>
  ): void;

  once(event: "NewRandomGenerator", cb: Callback<NewRandomGenerator>): void;
  once(
    event: "NewRandomGenerator",
    options: EventOptions,
    cb: Callback<NewRandomGenerator>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TicketsClaim", cb: Callback<TicketsClaim>): void;
  once(
    event: "TicketsClaim",
    options: EventOptions,
    cb: Callback<TicketsClaim>
  ): void;

  once(event: "TicketsPurchase", cb: Callback<TicketsPurchase>): void;
  once(
    event: "TicketsPurchase",
    options: EventOptions,
    cb: Callback<TicketsPurchase>
  ): void;
}
